#!/bin/bash

# TODO
# verificare la corretta esecuzione del suggeritore e di qualsiasi altro comando: gestire errori

# esporta le variabili d'ambiente
set -a
# set -x

# import variables
source <(grep = scripts/config.ini)

# importing functions
source ./scripts/functions/get_anagrafica
source ./scripts/functions/get_next_mass_date
source ./scripts/functions/get_liturgia
source ./scripts/functions/convert_iso_to_extended_date
source ./scripts/functions/convert_iso_to_weekday
source ./scripts/functions/add_element_to_mkdocs_nav
source ./scripts/functions/build_hai_suggestions_blog_post

# crea cartella data se non esiste
if [ ! -d "$PATH_DATA" ]; then
  mkdir $PATH_DATA
  echo "‚úÖ Creata cartella data"
fi

# crea cartella liturgie se non esiste
if [ ! -d "$PATH_LITURGIE" ]; then
  mkdir $PATH_LITURGIE
  echo "‚úÖ Creata cartella liturgie"
fi

# rendi eseguibili gli script
chmod +x ./scripts/*

# se vuoi scaricare anagrafica canti e testi canti devi usare
# db_downloader
# con le opportune istruzioni e autenticazioni
# viene eseguito da una GitHub Action una volta al mese

# genero la data di oggi in formato iso
today=$(date +%Y-%m-%d)

# scarica liturgia
liturgia_data_iso=$(get_next_mass_date "$PATH_CALENDARIO_LITURGICO" "$today" 1)
liturgia_data_yyyymmdd=$(date -d $liturgia_data_iso +%Y%m%d)
liturgia_data_estesa=$(convert_iso_to_extended_date "$liturgia_data_iso")
liturgia_weekday=$(convert_iso_to_weekday "$liturgia_data_iso")

# id liturgia
id_liturgia=$(mlr --csv filter '$date == "'"$liturgia_data_iso"'"' "$PATH_CALENDARIO_LITURGICO" | mlr --csv cut -f id_liturgia | mlr --c2n cat)
echo "id liturgia: $id_liturgia"


get_liturgia "$liturgia_data_iso" "$PATH_CALENDARIO_LITURGICO" "$PATH_LITURGIE_FORMATTED" > $PATH_LITURGIA

# se get liturgia ritorna errore, esci
if [ $? -eq 1 ]; then
  echo "‚ùå $0: Errore durante il recupero della liturgia" >&2
  exit 1
fi

echo "üìÖ Data della prossima liturgia domenicale: $(date -d $liturgia_data_iso +%d/%m/%Y)"
echo "‚úÖ Individuata liturgia"

# aggiorna canti manually selected
./scripts/get_manually_selected

# per supportare la generazione di pi√π suggerimenti bisogner√† modificare il suggeritore.py e build_page

# run suggeritore
./scripts/suggeritore.py "$liturgia_data_iso" 

# build website homepage
cp $PATH_TEMPLATE $PATH_HOMEPAGE
sed -i "s#$PLACEHOLDER_DATE#$liturgia_weekday $liturgia_data_estesa#g" $PATH_HOMEPAGE
sed -i "s#$PLACEHOLDER_URL_CEI#$URL_LITURGIA_CEI$liturgia_data_yyyymmdd#g" $PATH_HOMEPAGE
echo "‚úÖ Homepage pronta"

# organize files 
cp $PATH_DATA/$FILE_BASENAME_SUGGERIMENTI-latest.csv $PATH_DATA/$FILE_BASENAME_SUGGERIMENTI-$liturgia_data_yyyymmdd.csv
# Copy the JSON file with a date-specific filename
cp $PATH_DATA/suggeriti-top20-latest.json $PATH_DATA/suggeriti-top20-$liturgia_data_yyyymmdd.json



# ---------------------- Archive page generation and editing ---------------------- #
path_suggerimenti_on_archive="docs/archivio/$liturgia_data_estesa.md"
cp $PATH_HOMEPAGE "$path_suggerimenti_on_archive"

# Modify the archive page to reference the dated JSON file instead of latest
sed -i "s/suggeriti-top20-latest.json/suggeriti-top20-$liturgia_data_yyyymmdd.json/g" "$path_suggerimenti_on_archive"

# Modify the archive page to reference the dated liturgy file instead of latest
sed -i "s|../risorse/lezionari/liturgia-latest.txt|../../risorse/lezionari/liturgie/formatted/$id_liturgia.md|g" "$path_suggerimenti_on_archive"

# Modify the archive page to reference the dated not-selected file instead of latest
sed -i "s|data/not-selected-latest.json|data/not-selected-$liturgia_data_yyyymmdd.json|g" "$path_suggerimenti_on_archive"

# clean suggerimenti on archive (remove header from archive)
line_end=$(cat "$path_suggerimenti_on_archive" | grep -n "archivePageStartHere" | cut -d: -f1)

# delete from line 1 to line line_end
tail -n +$line_end "$path_suggerimenti_on_archive" > tmp.md
mv tmp.md "$path_suggerimenti_on_archive"

# new nav management: aggiungi la liturgia all'archivio
add_element_to_mkdocs_nav "mkdocs.yml" "$(date -d $liturgia_data_iso +%Y)" "archivio/$liturgia_data_estesa.md"
echo "üìÇ Archivio aggiornato"



# ---------------------- Blog post generation  ---------------------- #
# build blog post filename
path_file_blog_post="$PATH_DIR_BLOG_POST/$BASENAME_FILE_BLOG_POST-$liturgia_data_yyyymmdd.md"

# generate blog post
if [ ! -f "$path_file_blog_post" ]; then
  echo "üìù Generazione del blog post (modello: $LLM_MODEL_DEFAULT) ..."

  build_hai_suggestions_blog_post $liturgia_data_iso \
  $PATH_CALENDARIO_LITURGICO \
  $PATH_LITURGIE \
  $PATH_DATA_TOP20 $PATH_DATA_INGRESSO $PATH_DATA_OFFERTORIO $PATH_DATA_COMUNIONE $PATH_DATA_CONGEDO \
  $PATH_TEMPLATE_BLOG_POST \
  $PATH_CANTI \
  $PATH_DATA/$FILE_BASENAME_SUGGERIMENTI-$liturgia_data_yyyymmdd.csv \
  40 \
  temp_hai_attachment_$liturgia_data_yyyymmdd.md \
  $LLM_MODEL_DEFAULT $LLM_TEMPERATURE_DEFAULT \
  $PATH_FILE_SYSTEM_PROMPT_HAI_SUGGESTIONS > $path_file_blog_post || \
  {
    echo "‚ùå Errore durante la generazione del blog post" >&2
    exit 1
  }

  echo "‚úÖ Blog post dei suggerimenti pronto"
else
  echo "‚ùå Il file $path_file_blog_post esiste gi√†. Non verr√† sovrascritto."
fi

echo "‚úÖ Script completato con successo"
