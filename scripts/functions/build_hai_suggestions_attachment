#!/bin/bash

### WIP: INCOMPLETE FUNCTION ###

# ---------------------------------------------------------------------------------------------------- #
# Usa get_local_text_by_id_canti per ottenere il testo del canto con id uguale all'input
# Argomenti:
# - path al template del blog post hai
# - path alla cartella con i testi dei canti  | required by get_local_text_by_id_canti
# - path al csv con i canti consigliati da cui estrarre colonna id_canti e ciclare per stampare i testi
# - soglia minima da considerare per filtrare il csv dei canti consigliati
# - path al file di output da creare
# Esempio:
# Example: build_hai_suggestions_attachment useful-files/template-blog-post-hai.md risorse/canti data/suggerimenti-20250209.csv 40 test_hai_attachment.md
# ---------------------------------------------------------------------------------------------------- #

build_hai_suggestions_attachment()
{
    # check $1, $2, $3, $4, $5 not empty
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ]; then
        echo "Error: missing input"
        echo "Usage: build_hai_suggestions_attachment <path_to_template> <path_to_lyrics_folder> <path_to_suggested_songs_csv> <threshold> <output_file>"
        echo "Example: build_hai_suggestions_attachment useful-files/template-blog-post-hai.md risorse/canti data/suggerimenti-20250209.csv 40 test_hai_attachment.md"
        return 1
    else
        template_path=$1
        lyrics_folder_path=$2
        suggested_csv_path=$3
        threshold=$4
        output_file=$5
    fi

    # check if the file suggested_csv_path and $template_path exist
    if [ ! -f "$suggested_csv_path" ] || [ ! -f "$template_path" ]; then
        echo "Error: File $suggested_csv_path or $template_path not found"
        return 1
    fi

    # load get_local_text_by_id_canti function
    source ./scripts/functions/get_local_text_by_id_canti || \
    { echo "Error: Failed to load get_local_text_by_id_canti function"; return 1; }

    # create the output file
    touch "$output_file"

    # add template to the output file
    echo "Template blog post" > "$output_file"
    echo "" >> "$output_file"
    echo "<template>" >> "$output_file"
    cat "$template_path" >> "$output_file"
    echo "" >> "$output_file"
    echo "</template>" >> "$output_file"
    echo "" >> "$output_file"

    # obtain the list of suggested ids and titles
    suggested_ids=$(< "$suggested_csv_path" mlr --csv --headerless-csv-output filter '$score >= '"$threshold"'' then cut -f id_canti) || \
    { echo "Error: Failed to extract suggested ids from $suggested_csv_path"; rm "$output_file"; return 1; }
    suggested_titles=$(< "$suggested_csv_path" mlr --csv --headerless-csv-output filter '$score >= '"$threshold"'' then cut -f titolo) || \
    { echo "Error: Failed to extract suggested titles from $suggested_csv_path"; rm "$output_file"; return 1; }
    
    # transform suggestd_ids and suggested_titles into arrays
    IFS=$'\n' read -d '' -r -a suggested_ids_array <<< "$suggested_ids"
    IFS=$'\n' read -d '' -r -a suggested_titles_array <<< "$suggested_titles"

    # iterate over the suggested ids and titles to add titles and lyrics to the output file
    for i in "${!suggested_ids_array[@]}"; do
        id=${suggested_ids_array[$i]}
        title=${suggested_titles_array[$i]}

        # add title and lyrics to the output file
        echo "# Testo di $title" >> "$output_file"
        text=$(get_local_text_by_id_canti "$id" "$lyrics_folder_path") || \
        { echo "Error: Failed to get text for id $id"; rm "$output_file"; return 1; }
        echo "$text" >> "$output_file"
        echo "" >> "$output_file"
    done

    echo "Attachment file created: $output_file"
}
    